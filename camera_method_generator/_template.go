package three

// Code generated by go generate; DO NOT EDIT.
//
// using the following cmd:
// camera_method_generator -typeName {{ .Type }} -typeSlug {{ .Slug }}

import "syscall/js"

var _ Camera = {{ .Type }}{}

// Return a new camera with the same properties as this one.
func (obj {{ .Type }}) Clone() {{ .Type }} {
	return {{ .Type }}{
		Value: obj.Call("clone"),
	}
}

// Copy the properties from the source camera into this one.
func (obj {{ .Type }}) Copy(src {{ .Type}}, recursive bool) {{ .Type }} {
	return {{ .Type }}{
		Value: obj.Call("copy", src.getInternalObject(), recursive),
	}
}

// Returns a Vector3 representing the world space direction 
// in which the camera is looking. (Note: A camera looks down its local, negative z-axis).
func (obj {{ .Type }}) GetWorldDirection(target Vector3) Vector3 {
	return Vector3{
		Value: obj.Call("getWorldDirection", target.Value),
	}
}

func (obj {{ .Type }}) getInternalObject() js.Value {
	return obj.Value
}

func (obj {{ .Type }}) SetPosition(v Vector3) {
	obj.Get("position").Call("copy", v.Value)
}

func (obj {{ .Type }}) SetRotation(euler Euler) {
	obj.Get("rotation").Call("copy", euler.Value)
}

// SetUp sets the up direction for the camera.
//
// It is the equivalent to c.Up.Set(v.X, v.Y, v.Z)
func (obj {{ .Type }}) SetUp(v Vector3) {
	x, y, z := v.Coords()
	obj.Get("up").Call("set", x, y, z)
}

func (obj {{ .Type }}) LookAt(x, y, z float64) {
	obj.Call("lookAt", x, y, z)
}
