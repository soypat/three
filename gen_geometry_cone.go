package three

// Code generated by go generate; DO NOT EDIT.
//
// using the following cmd:
// geometry_method_generator -typeName ConeGeometry -typeSlug cone

import "syscall/js"

// Compile-time check that this type implements Geometry interface.
var _ Geometry = ConeGeometry{}

func (g ConeGeometry) ApplyMatrix4(matrix Matrix4) {
	g.Value.Call("applyMatrix4", matrix)
}

func (g ConeGeometry) RotateX() {
	g.Value.Call("rotateX")
}

func (g ConeGeometry) RotateY() {
	g.Value.Call("rotateY")
}

func (g ConeGeometry) RotateZ() {
	g.Value.Call("rotateZ")
}

func (g ConeGeometry) Translate() {
	g.Value.Call("translate")
}

func (g ConeGeometry) Scale() {
	g.Value.Call("scale")
}

func (g ConeGeometry) LookAt() {
	g.Value.Call("lookAt")
}

func (g ConeGeometry) FromBufferGeometry(geometry Geometry) {
	g.Value.Call("fromBufferGeometry")
}

func (g ConeGeometry) Center() {
	g.Value.Call("center")
}

func (g ConeGeometry) Normalize() ConeGeometry {
	g.Value.Call("normalize")
	return g
}

func (g ConeGeometry) ComputeFaceNormals() {
	g.Value.Call("computeFaceNormals")
}

func (g ConeGeometry) ComputeVertexNormals(areaWeighted bool) {
	g.Value.Call("computeVertexNormals", areaWeighted)
}

func (g ConeGeometry) ComputeFlatVertexNormals() {
	g.Value.Call("computeFlatVertexNormals")
}

func (g ConeGeometry) ComputeMorphNormals() {
	g.Value.Call("computeMorphNormals")
}

func (g ConeGeometry) ComputeLineDistances() {
	g.Value.Call("computeLineDistances")
}

func (g ConeGeometry) ComputeBoundingBox() {
	g.Value.Call("computeBoundingBox")
}

func (g ConeGeometry) ComputeBoundingSphere() {
	g.Value.Call("computeBoundingSphere")
}

func (g ConeGeometry) Merge(geometry Geometry, matrix Matrix4, materialIndexOffset float64) {
	g.Value.Call("merge", geometry.getInternalObject(), matrix.Value, materialIndexOffset)
}

func (g ConeGeometry) MergeMesh(mesh Mesh) {
	g.Value.Call("mergeMesh", mesh.getInternalObject())
}

func (g ConeGeometry) MergeVertices() {
	g.Value.Call("mergeVertices")
}

func (g ConeGeometry) SortFacesByMaterialIndex() {
	g.Value.Call("sortFacesByMaterialIndex")
}

func (g ConeGeometry) ToJSON() js.Value {
	return g.Value.Call("toJSON")
}

// func (g ConeGeometry) Clone() ConeGeometry {
// 	return g.Value.Call("clone")
// }

func (g ConeGeometry) Copy(source Object3D, recursive bool) ConeGeometry {
	return ConeGeometry{Value: g.getInternalObject().Call("copy", source.getInternalObject(), recursive)}
}

func (g ConeGeometry) Dispose() {
	g.Value.Call("dispose")
}

func (g ConeGeometry) getInternalObject() js.Value {
	return g.Value
}
