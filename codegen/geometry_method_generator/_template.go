package three

// Code generated by go generate; DO NOT EDIT.
//
// using the following cmd:
// geometry_method_generator -typeName {{ .Type }} -typeSlug {{ .Slug }}

import "syscall/js"

// Compile-time check that this type implements Geometry interface.
var _ Geometry = {{ .Type }}{}

func (g {{ .Type }}) ApplyMatrix4(matrix Matrix4) {
	g.Value.Call("applyMatrix4", matrix)
}

func (g {{ .Type }}) RotateX() {
	g.Value.Call("rotateX")
}

func (g {{ .Type }}) RotateY() {
	g.Value.Call("rotateY")
}

func (g {{ .Type }}) RotateZ() {
	g.Value.Call("rotateZ")
}

func (g {{ .Type }}) Translate() {
	g.Value.Call("translate")
}

func (g {{ .Type }}) Scale() {
	g.Value.Call("scale")
}

func (g {{ .Type }}) LookAt() {
	g.Value.Call("lookAt")
}

func (g {{ .Type }}) FromBufferGeometry(geometry Geometry) {
	g.Value.Call("fromBufferGeometry")
}

func (g {{ .Type }}) Center() {
	g.Value.Call("center")
}

func (g {{ .Type }}) Normalize() {{ .Type }} {
	g.Value.Call("normalize")
	return g
}

func (g {{ .Type }}) ComputeFaceNormals() {
	g.Value.Call("computeFaceNormals")
}

func (g {{ .Type }}) ComputeVertexNormals(areaWeighted bool) {
	g.Value.Call("computeVertexNormals", areaWeighted)
}

func (g {{ .Type }}) ComputeFlatVertexNormals() {
	g.Value.Call("computeFlatVertexNormals")
}

func (g {{ .Type }}) ComputeMorphNormals() {
	g.Value.Call("computeMorphNormals")
}

func (g {{ .Type }}) ComputeLineDistances() {
	g.Value.Call("computeLineDistances")
}

func (g {{ .Type }}) ComputeBoundingBox() {
	g.Value.Call("computeBoundingBox")
}

func (g {{ .Type }}) ComputeBoundingSphere() {
	g.Value.Call("computeBoundingSphere")
}

func (g {{ .Type }}) Merge(geometry Geometry, matrix Matrix4, materialIndexOffset float64) {
	g.Value.Call("merge", geometry.getInternalObject(), matrix.Value, materialIndexOffset)
}

func (g {{ .Type }}) MergeMesh(mesh Mesh) {
	g.Value.Call("mergeMesh", mesh.getInternalObject())
}

func (g {{ .Type }}) MergeVertices() {
	g.Value.Call("mergeVertices")
}

func (g {{ .Type }}) SortFacesByMaterialIndex() {
	g.Value.Call("sortFacesByMaterialIndex")
}

func (g {{ .Type }}) ToJSON() js.Value {
	return g.Value.Call("toJSON")
}

// func (g {{ .Type }}) Clone() {{ .Type }} {
// 	return g.Value.Call("clone")
// }

func (g {{ .Type }}) Copy(source Object3D, recursive bool) {{ .Type }} {
	return {{ .Type }}{Value: g.getInternalObject().Call("copy", source.getInternalObject(), recursive)}
}

func (g {{ .Type}}) Dispose() {
	g.Value.Call("dispose")
}

func (g {{ .Type }}) getInternalObject() js.Value {
	return g.Value
}
